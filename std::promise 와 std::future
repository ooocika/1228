#include <iostream>
#include<future>
#include<string>
#include<thread>
using std::string;
void worker(std::promise<string>* p){

  p->set_value("some data");

  
}
int main(){
  std::promise<string> p;

  std::future<string> data= p.get_future();

  std::thread t(worker,&p);

data.wait();

  std::cout << "받은 데이터 : " << data.get() << std::endl;

  t.join();
  
}

//-=====================================================================
#include <condition_variable>
#include <iostream>
#include <mutex>
#include <string>
#include <thread>
std::condition_variable cv;
std::mutex m;
bool done = false;
std::string info;
void worker() {
{
std::lock_guard<std::mutex> lk(m);
info = "some data"; // 위의 p->set_value("some data") 에 대응
done = true;
}
cv.notify_all();
}
int main() {
std::thread t(worker);
std::unique_lock<std::mutex> lk(m);
cv.wait(lk, [] { return done; }); // 위의 data.wait() 이라 보면 된다.
lk.unlock();
std::cout << "받은 데이터 : " << info << std::endl;
t.join();
}

//-=====================================================================
#include<exception>
#include<future>
#include <iostream>
#include <string>
#include <thread>
using std::string;


void worker(std::promise<string>* p) {
try{
  throw std::runtime_error("Some Error!");
  
}catch(...){
  p->set_exception(std::current_exception());
}
}
int main() {
std::promise<string> p;

  std::future<string> data = p.get_future();

  std::thread t(worker, &p);

  data.wait();

  try{
    data.get();
    
  }catch(const std::exception& e){
    std::cout<<"예외: " << e.what() << std::endl;
}
t.join();

}
//-=====================================================================
#include<chrono>
#include<exception>
#include<future>
#include<iostream>
#include<string>
#include<thread>

void worker(std::promise<void>* p){
  std::this_thread::sleep_for(std::chrono::seconds(10));
  p->set_value();
}
int main(){
  std::promise<void> p;

  std::future<void> data = p.get_future();

  std::thread t(worker, &p);

  while(true){
    std::future_status status = data.wait_for(std::chrono::seconds(1));

    if(status == std::future_status::timeout){
      std::cerr << ">";
  }
    else if(status == std::future_status::ready){
      break;
    }
  }
  t.join();


  
}

//-=====================================================================
//-=====================================================================
//-=====================================================================


//-=====================================================================
