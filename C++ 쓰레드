#include <atomic>
#include <iostream>
#include <thread>
#include <vector>
using std::memory_order_relaxed;
void worker(std::atomic<int>* counter) {
for (int i = 0; i < 10000; i++) {
// 다른 연산들 수행
counter->fetch_add(1, memory_order_relaxed);
}
}
int main() {

std::vector<std::thread> threads;
std::atomic<int> counter(0);
for (int i = 0; i < 4; i++) {
threads.push_back(std::thread(worker, &counter));
}
for (int i = 0; i < 4; i++) {
threads[i].join();
}
std::cout << "Counter : " << counter << std::endl;
}


//=======================================================
#include <atomic>
#include <iostream>
#include <thread>
#include <vector>
using std::memory_order_relaxed;
void producer(std::atomic<bool>* is_ready, int* data) {
*data = 10;
is_ready->store(true, memory_order_relaxed);
}

void consumer(std::atomic<bool>* is_ready, int* data) {
// data 가 준비될 때 까지 기다린다.
while (!is_ready->load(memory_order_relaxed)) {
}
std::cout << "Data : " << *data << std::endl;
}
int main() {
std::vector<std::thread> threads;
std::atomic<bool> is_ready(false);
int data = 0;
threads.push_back(std::thread(producer, &is_ready, &data));
threads.push_back(std::thread(consumer, &is_ready, &data));
for (int i = 0; i < 2; i++) {
threads[i].join();
}
}
//=======================================================
#include <atomic>
#include <iostream>
#include <thread>
#include <vector>



void producer(std::atomic<bool>* is_ready, int* data) {
*data = 10;
is_ready->store(true, std::memory_order_release);
}



void consumer(std::atomic<bool>* is_ready, int* data) {
// data 가 준비될 때 까지 기다린다.
while (!is_ready->load(std::memory_order_acquire)) {
}

  
std::cout << "Data : " << *data << std::endl;
}




int main() {
std::vector<std::thread> threads;
std::atomic<bool> is_ready(false);
int data = 0;

  
threads.push_back(std::thread(producer, &is_ready, &data));
threads.push_back(std::thread(consumer, &is_ready, &data));
  
for (int i = 0; i < 2; i++) {
threads[i].join();
}
}

//=======================================================

#include <atomic>
#include <iostream>
#include <thread>
#include <vector>

using std::memory_order_relaxed;

std::atomic<bool> is_ready;
std::atomic<int> data[3];

void producer() {
  data[0].store(1, memory_order_relaxed);
  data[1].store(2, memory_order_relaxed);
  data[2].store(3, memory_order_relaxed);
  is_ready.store(true,std::memory_order_release);
}



void consumer() {
// data 가 준비될 때 까지 기다린다.
while (!is_ready.load(std::memory_order_acquire)) {
}
std::cout << "data[0] : " << data[0].load(std::memory_order_relaxed) << std::endl;
  std::cout << "data[1] : " << data[1].load(std::memory_order_relaxed) << std::endl;
  std::cout << "data[2] : " << data[2].load(std::memory_order_relaxed) << std::endl;
  

}




int main() {
std::vector<std::thread> threads;
  
threads.push_back(std::thread(producer));
threads.push_back(std::thread(consumer));
  
for (int i = 0; i < 2; i++) {
threads[i].join();
}
}
//=======================================================
#include <atomic>
#include <iostream>
#include <thread>
std::atomic<bool> x(false);
std::atomic<bool> y(false);
std::atomic<int> z(0);
void write_x() { x.store(true, std::memory_order_release); }
C++ 쓰레드 786
void write_y() { y.store(true, std::memory_order_release); }
void read_x_then_y() {
while (!x.load(std::memory_order_acquire)) {
}
if (y.load(std::memory_order_acquire)) {
++z;
}
}
void read_y_then_x() {
while (!y.load(std::memory_order_acquire)) {
}
if (x.load(std::memory_order_acquire)) {
++z;
}
}
int main() {
thread a(write_x);
thread b(write_y);
thread c(read_x_then_y);
thread d(read_y_then_x);
a.join();
b.join();
c.join();
d.join();
std::cout << "z : " << z << std::endl;
}

//=======================================================

#include <atomic>
#include <iostream>
#include <thread>
using std::memory_order_seq_cst;
using std::thread;



std::atomic<bool> x(false);
std::atomic<bool> y(false);
std::atomic<int> z(0);

void write_x() { x.store(true, memory_order_seq_cst); }

void write_y() { y.store(true,memory_order_seq_cst); }

void read_x_then_y() {
while (!x.load(std::memory_order_seq_cst)) {
}
if (y.load(std::memory_order_seq_cst)) {
++z;
}
}

void read_y_then_x() {
while (!y.load(std::memory_order_seq_cst)) {
}
if (x.load(std::memory_order_seq_cst)) {
++z;
}
}
int main() {
thread a(write_x);
thread b(write_y);
thread c(read_x_then_y);
thread d(read_y_then_x);
a.join();
b.join();
c.join();
d.join();
std::cout << "z : " << z << std::endl;
}
//=======================================================


//=======================================================
//=======================================================
